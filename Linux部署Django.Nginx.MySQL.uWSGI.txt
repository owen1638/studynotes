Linux内网安装python
	
	下载python压缩包，用pscp.exe传到Linux系统，
	#mkdir -p /usr/local/python365
	#tar zxvf Python-3.6.5.tgz
	#cd Python-3.6.5
	#./configure --prefix=/usr/local/python356
			--prefix 指安装目录
	#make
	#make install
	#ln -s /usr/local/python356/bin/python3  /usr/local/bin/python3
			软链接到/usr/local/bin/python3  因为/usr/local/bin/ 在path中，可以直接用python3命令
	#ln -s /usr/local/python356/bin/pip3 /usr/local/bin/pip3
	
	测试安装是否完成   python3 -V（查看版本）

Linux内网安装python包
	现在有网的环境下 pip3 install pandas
				然后 pip3 download pandas  下载python包
				将python包用pscp.exe传到Linux系统目录下（如/usr/local/pack/pandas)
				最后，在Linux系统中 用命令 pip3 install /usr/local/pack/pandas

				
Linux内网安装MySQL
	mysql有二进制码安装，和源码编译安装（mysql5.5使用cmake安装，mysql5.7需要安装boost依赖安装）,因为boost依赖安装麻烦，所以用二进制码安装
	栗子：MySql 5.7.23安装
		首先上MySql的官网下载  https://dev.mysql.com/downloads/mysql/
		选择相应源码包：Linux-Generic-x86,64bit
		1、 新建/usr/local/src目录，保存下载的各类安装包
			mkdir /usr/local/src
		2、切换到/usr/local/src 下
			cd /usr/local/src
		3、下载mysql5.7二进制包，解压到当前目录下
			tar -zxvf mysql-5.7.23-linux-glibc2.5-x86_64.tar.gz
		4.将解过的mysql5.7包移动到/usr/local/下并改名为mysql
			mv mysql-5.7.23-linux-glibc2.5-x86_64 /usr/local/mysql
		5.切换到/usr/local/mysql下
			cd /usr/local/mysql
		6.新增mysql用户，并禁止shell登陆
			# groupadd mysql
			#useradd -r -g mysql -s /sbin/nologin mysql
		7.初始化mysql5.7数据库:
			确认/data/mysql数据库文件夹是否存在，不存在则创建
			# ./bin/mysqld --initialize --user=mysql --datadir=/data/mysql
			a.注意生成的临时密码 Ed0fem1S(oH/
			2018-08-30T02:03:43.986729Z 1 [Note] A temporary password is generated for root@localhost: Ed0fem1S(oH/
			b.继续执行
			# ./bin/mysql_ssl_rsa_setup --datadir=/data/mysql
		8.复制配置文件并修改
			注意，如果./support-files/my-default.cnf 没有这个文件，可以到网上去收一下这个文件的大致内容。
				# http://dev.mysql.com/doc/refman/5.7/en/server-configuration-defaults.html
				# *** DO NOT EDIT THIS FILE. It's a template which will be copied to the
				# *** default location during install, and will be replaced if you
				# *** upgrade to a newer version of MySQL.
				 
				[mysqld]
				 
				# Remove leading # and set to the amount of RAM for the most important data
				# cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.
				# innodb_buffer_pool_size = 128M
				 
				# Remove leading # to turn on a very important data integrity option: logging
				# changes to the binary log between backups.
				# log_bin
				 
				# These are commonly set, remove the # and set as required.
				# basedir = .....
				# datadir = .....
				# port = .....
				# server_id = .....
				# socket = .....
				 
				# Remove leading # to set options mainly useful for reporting servers.
				# The server defaults are faster for transactions and fast SELECTs.
				# Adjust sizes as needed, experiment to find the optimal values.
				# join_buffer_size = 128M
				# sort_buffer_size = 2M
				# read_rnd_buffer_size = 2M
				 
				sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES
			 

			a.复制主配置文件
				# cp ./support-files/my-default.cnf /etc/my.cnf
			b.修改 /etc/my.cnf 配置文件
				# vi /etc/my.cnf
				# These are commonly set, remove the # and set as required.
				basedir = /usr/local/mysql //指定程序路径
				datadir = /data/mysql //指定数据存放路径
				port = 3306 //指定端口号
				# server_id = .....
				socket = /tmp/mysql.sock //指定sock文件
			9.复制启动文件并修改相关参数
				a.复制启动脚本文件到init.d下
					cp ./support-files/mysql.server /etc/init.d/mysqld
				b.修改启动脚本相关参数
					vi /etc/init.d/mysqld
					basedir=/usr/local/mysql //指定程序路径
					datadir=/data/mysql //指定数据存放路径
			10.启动mysql服务，并查看服务启动状态
				# chkconfig --add mysqld //加入开机启动
				# /etc/init.d/mysqld start //启动mysql服务
				# ps aux |grep mysqld // 查看mysql进程
				# netstat -ntlp | grep 3306 //查看3306端口监听情况
			11.重置密码
				a.使用初始化临时密码登陆
					# /usr/local/mysql/bin/mysql -uroot -p'Ed0fem1S(oH/'
				b.修改mysql登陆密码:mysql
					mysql> set password = password('mysql');

MySQL 开发包
		Django 使用mysql需要安装mysqlclient
		when installing mysqlclient  --pip3 install mysqlclient,raised OSError:mysql_config not found
		it's because of not install mysql_devel
		steps to install mysql_devel:
			1.download mysql_common.rpm mysql_libs.rpm mysql_devel.rpm from www.mysql.com and my Linux version is CentOS which is inherited from Red Hat Enterprise Linux(RHEL) so that find the rpms in RHEL option
			2.install mysql_common first, then mysql_libs, finally mysql_devel
			3.at last install mysqlclient --pip3 install mysqlclient

		
Django项目中配置uwsgi
	项目目录（例如本例中DataBusines）下创建uwsgi.ini文件，配置如下
		[uwsgi]
		#使用nginx连接时使用socket
		socket=10.41.108.202:8000 #本地的话127.0.0.1端口自定，线上的话服务器地址。注意该配置要和nginx的nginx.conf配置地址一样
		#如果直接作web服务器就直接用http
		#http=127.0.0.1:8000
		chdir=/usr/Django/Peppa #服务器中的项目路径
		wsgi-file=Peppa/wsgi.py #项目中wsgi.py文件的路径，相对于项目目录
		processes=4
		threads=2
		master=true
		pidfile=uwsgi.pidfile
		daemonize=uwsgi.log
		
	Uwsgi的使用（启动、查看进程、关闭）
	启动uwsgi.ini,需要切换到项目目录
	启动uwsgi： uwsgi --ini  uwsgi.ini
	查看uwsgi进程：ps ajx|grep uwsgi
	关闭uwsgi：
	查阅相关资料文档，提到多种命令关闭方式，关闭命令的意义在于修改配置文件后，
	一般需要重启uwsgi才会生效
	1、uwsgi --stop uwsgi.pid（不好用，经常报pid找不到）
	2、sudo pkill -f uwsgi -9（不好用，有可能报错，无效的-9）
	3、killall -9 uwsgi（该命令最好用）

nginx的使用（启动、查看进程、关闭）

	进入nginx安装目录：cd /usr/local/nginx/
	启动nginx：  sudo sbin/nginx
	查看nginx进程： ps ajx|grep nginx
	关闭uwsgi：

	查阅相关资料文档，提到多种命令关闭方式，关闭命令的意义在于修改配置文件后，一般需要重启nginx才会生效

	1、sudo sbin/nginx –s stop（不好用,报异常无效的-s）
	2、sudo pkill -f uwsgi -9（不好用，报错，无效的-9）
	3、killall -9 nginx（该命令最好用）

nginx的配置文件nginx.conf配置
	配置文件目录/usr/local/nginx/conf/nginx.conf,配置文件的修改需要通过vi进行修改
	在server这一块修改为如下：
		server {
		listen 80;#配置监听端口
		server_name localhost;
		charset     utf-8;
		access_log      /var/log/nginx/nginx_access.log main;
		error_log       /var/log/nginx/nginx_error.log;#nginx的错误日志
		client_max_body_size 75M;

		location /static {
			alias /djproject/mysite/static;  #指定django的静态文件
			}

		location / {
			include     /etc/nginx/uwsgi_params;  #加载uwsgi模块
			uwsgi_pass  10.41.108.202:8000;   #所有请求转到8000端口交给uwsgi处理。该配置需和uwsgi.ini中socket的设置一样。
			}
		}

nginx上传文件大小限制问题
	上传文件超过1M（默认）就会引发413错误
	修改nginx.conf,在http模块添加
		client_max_body_size 2048M;  #根据需要填写大小
		client_body_buffer_size 5M;  #根据需要填写