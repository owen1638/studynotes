创建仓库
	1, 创建目录
		$ mkdir studynotes

	2,初始化
		$ git init
        
往仓库添加文件
	分两步  先git add file  然后 git commit -m "prompt"
	1,git add GitStudyNotes.txt
	2, git commit -m "create GitStudyNotes"
	
	为什么Git添加文件需要add，commit一共两步呢？因为commit可以一次提交很多文件，所以你可以多次add不同的文件

时光穿梭机
    版本回退
    git reset --hard commit_id
        HEAD是一个指针，指向当前版本    git reset --hard HEAD
                        指向上一个版本  git reset --hard HEAD^
        git log 查看历史记录 查询commit_id 然后 git reset --hard commit_id 选择特定的版本回退
    
    如果两次修改：1.第一次修改“first modi”，2.git add file，3.第二次修改“second modi” 4. git commit -m "prompt" 
        那么最终提交的是  "first modi"  因为第二次修改并没有添加到暂存区（Stage），最终也没有提交到仓库分支
        正确操作应该是  修改, git add file ,第二次修改, git add file, git commit -m "prompt"
        
    git checkout -- <file>
        命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
            一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
            一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
            总之，就是让这个文件回到最近一次git commit或git add时的状态。
            
        命令git reset HEAD <file>可以把暂存区的修改撤销掉（unstage），重新放回工作区：
        假设你不但改错了东西，还从暂存区提交到了版本库，怎么办呢？还记得版本回退一节吗？可以回退到上一个版本。不过，这是有条件的，就是你还没有把自己的本地版本库推送到远程。
        
        git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。

远程仓库
    1、创建SSH KEY： ssh-keygen -t rsa -C "youremail@example.com" 
    2、登陆GitHub，打开“Account settings”，“SSH Keys”页面：
       然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：
    GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。
    
    添加远程库
        在GitHub创建仓库
        把已有的本地仓库与之关联（也可以克隆到本地仓库），
            git remote add origin git@github.com:owen1638/studynotes.git
        然后把本地仓库内容push到GitHub
            git push -u origin master
  
  
                在使用Git 配置公司的远程仓库时git push origin master，出现以下问题
                xu:QProj xiaokai$ git push origin master
                To https://gitee.com/XXXXX.git
                 ! [rejected]        master -> master (non-fast-forward)
                error: failed to push some refs to 'https://gitee.com/XXXXX.git'
                hint: Updates were rejected because the tip of your current branch is behind
                hint: its remote counterpart. Integrate the remote changes (e.g.
                hint: 'git pull ...') before pushing again.
                hint: See the 'Note about fast-forwards' in 'git push --help' for details.
                从提示语中可以看出是，问题（Non-fast-forward）的出现原因在于：git仓库中已经有一部分代码，所以它不允许你直接把你的代码覆盖上去。于是你有2个选择方式：
                1、强推，即利用强覆盖方式用你本地的代码替代git仓库内的内容，如果远程仓库是刚建的，没有代码，可以这样操作，尽量避免这种操作方法。
                    git push -f

                2、先把git的东西fetch到你本地然后merge后再push
                    git fetch
                    git merge

                3、在使用的时候，git merge，又出现了以下的问题
                    git merge
                    fatal: refusing to merge unrelated histories
                    对于这个问题。使用git pull origin master --allow-unrelated-histories 
                    来处理一下。

                4、然后继续git merge,依然有问题
                    fatal: You have not concluded your merge (MERGE_HEAD exists).
                    Please, commit your changes before you merge.

                    这个就好处理了，是我们没有提交当前的变化， git add .,git commit -am "提交信息"然后再来一次git merge,然后ok.

                5、然后输入git pull,显示如下

                    Already up-to-date.
                    最后就可以执行git push origin master 
                    将代码上传到公司的远程仓库中。


